---
title: "Applied Predictive Modeling--Chapter 2 Short Tour"
author: "Rick Dean"
format:
  html:
    toc: false
    toc-depth: 4
    toc-location: "right"
    number-sections: false
    number-offset: 2
    self-contained: true
    smooth-scroll: true
    code-block-bg: "#f1f3f5"
    code-block-border-left: "#31BAE9"
    code-overflow: wrap
    tbl-cap-location: "bottom"
    fig-width: 5
    fig-height: 5
    fig-align: "center"
    fig-cap-location: "bottom"
    minimal: false
    css: ../../style.css
    link-external-newwindow: true
    abstract-title: "Abstract"
    abstract: "The following notes/scripts/plots are inspired by Chapter 2 of [Applied Predictive Modeling](http://appliedpredictivemodeling.com/) by Max Kuhn and Kjell Johnson. Look in the 'chapters' directory of the [AppliedPredictiveModeling](https://cran.r-project.org/web/packages/AppliedPredictiveModeling/index.html) package for the R scripts used in the book. "
---

```{r}
#| warning: false
#| message: false

library(data.table)
library(magrittr)
library(ggplot2)
library(caret)
library(earth)
library(AppliedPredictiveModeling)
library(RregressPkg)
library(RplotterPkg)
```

## 2.1 Case Study: Predicting Fuel Economy
<div class="task">Task: Prepare data for plotting.</div>

```{r}
data(FuelEconomy, package = "AppliedPredictiveModeling")
cars2010_dt <- data.table::setDT(cars2010)
cars2011_dt <- data.table::setDT(cars2011)
str(cars2010_dt)
```
2. Select variables and sort by engine displacement:
```{r}
cars2010_dt <-  cars2010_dt[,year := "2010"] %>%
  .[order(-EngDispl),] %>%
  .[,.(EngDispl, FE, year)]

cars2011_dt <-  cars2011_dt[,year := "2011"] %>%
  .[order(-EngDispl),] %>%
  .[,.(EngDispl, FE, year)]
```

3. Combine data into one data frame:
```{r}
cars_2010_2011_dt <- data.table::rbindlist(list(cars2010_dt, cars2011_dt))
```
<div class="task">Task:  Plot both years of data using `RplotterPkg::multi_scatter_plot()`</div>

```{r, fig.width = 10, fig.height = 6}
cars_plot <- RplotterPkg::multi_scatter_plot(
  df = cars_2010_2011_dt,
  factor_var = "year",
  factor_x = "EngDispl",
  aes_y = "FE",
  title = "Fuel Economy vs Engine Displacement",
  subtitle = "Years 2010, 2011",
  x_title = "Engine Displacement",
  y_titles = c("Fuel Efficiency (MPG)", NULL),
  y_limits = c(10,80),
  y_major_breaks = seq(10,80,10),
  rot_y_tic_label = TRUE,
  pts_line_alpha = .5
)
```
<div class="task">Task: Fit a single linear model to *cars2010_df* data and conduct 10-fold CV to estimate the error. Plot the fitted line over the observed data.</div>

<div class="note">"10-fold CV" -- Split up the training data into 10 segments to compute cross validation (CV) of the model</div>

1.  Estimate the linear model:
```{r}
set.seed(1)
lm1_fit <- caret::train(
  FE ~ EngDispl,
  data = cars2010_dt,
  method = "lm",
  trControl = caret::trainControl(method = "cv")
)
lm1_fit
```
2. Show a summary of the model:
```{r}
#str(lm1_fit)
summary(lm1_fit)
```
3. Add the predicted values computed from the lm1_fit model to *cars2010_dt*:
```{r}
cars2010_dt[,lm1_fit := stats::predict(lm1_fit)]
```

4. Plot the linear fit *lm1_fit* line through the observed data:
```{r}
RplotterPkg::create_scatter_plot(
  df = cars2010_dt,
  aes_x = "EngDispl",
  aes_y = "FE",
  title = "Engine Displacement vs Fuel Efficiency (2010)",
  subtitle = "Linear fit: FE ~ EngDispl",
  x_title = "Engine Displacement",
  y_title = "Fuel Efficiency (MPG)",
  rot_y_tic_label = TRUE
) +
  geom_line(aes(y = lm1_fit), color = "red", linetype = 2, size = 1.5)
```

5. Plot the observed versus the fitted response values:
```{r, fig.width=10, fig.height=10}
df <- data.frame(
  Observed = cars2010_dt$FE,
  Fitted = lm1_fit$finalModel$fitted.values
)
RplotterPkg::create_scatter_plot(
  df = df,
  aes_x = "Observed",
  aes_y = "Fitted",
  title = "Observed vs Fitted Response (2010)",
  subtitle = "Linear fit: (FE ~ EngDispl)",
  x_title = "Observed Fuel Efficiency",
  y_title = "Fitted Fuel Efficiency",
  rot_y_tic_label = T,
  pts_line_alpha = 0.5,
  x_limits = c(10, 70),
  x_major_breaks = seq(10,70,10),
  y_limits = c(10, 70),
  y_major_breaks = seq(10,70,10)
)

```

<div class="task">Task: Add a quadratic term to the model and plot the fitted curve over the observed data. </div>
1. Add the squared term to cars2010_dt:

```{r}
cars2010_dt[, EngDispl2 := EngDispl^2]
```
2. Estimate the quadratic model:

```{r}
lm2_fit <- caret::train(
  FE ~ EngDispl + EngDispl2,
  data = cars2010_dt,
  method = "lm",
  trControl = caret::trainControl(method = "cv")
)
lm2_fit
```
<div class="note">The squared term reduces the RMSE from 4.6 to 4.2.</div>

3. Show a summary of the model:
```{r}
summary(lm2_fit)
```

4. Add the predicted values computed from the model to *cars2010_dt*:

```{r}
cars2010_dt[,lm2_fit := stats::predict(lm2_fit)]
```

5. Plot the quadratic fit *lm2_fit* line through the observed data:
```{r}
RplotterPkg::create_scatter_plot(
  df = cars2010_dt,
  aes_x = "EngDispl",
  aes_y = "FE",
  title = "Engine Displacement vs Fuel Efficiency (2010)",
  subtitle = "Quadratic fit: FE ~ EngDispl + EngDispl^2",
  x_title = "Engine Displacement",
  y_title = "Fuel Efficiency (MPG)",
  rot_y_tic_label = TRUE
) +
  geom_line(aes(y = lm2_fit), color = "red", linetype = 2, size = 1.5)
```
 6. Plot the observed versus the fitted response values:
```{r, fig.width=10, fig.height=10}
df <- data.frame(
  Observed = cars2010_dt$FE,
  Fitted = lm2_fit$finalModel$fitted.values
)
RplotterPkg::create_scatter_plot(
  df = df,
  aes_x = "Observed",
  aes_y = "Fitted",
  title = "Observed vs Fitted Response (2010)",
  subtitle = "Quadratic fit: (FE ~ EngDispl + EngDispl^2)",
  x_title = "Observed Fuel Efficiency",
  y_title = "Fitted Fuel Efficiency",
  rot_y_tic_label = TRUE,
  pts_line_alpha = 0.5,
  x_limits = c(10, 70),
  x_major_breaks = seq(10,70,10),
  y_limits = c(10, 70),
  y_major_breaks = seq(10,70,10)
)
```

<div class="task">Task: Fit a multivariate adaptive regression spline (MARS) model to *cars2010_dt* data. Plot the fitted curve over the observed data. </div>

1.  Estimate the MARS model:
```{r}
set.seed(1)
mars_fit <- train(
  FE ~ EngDispl,
  data = cars2010_dt,
  method = "earth",
  tuneLength = 15,
  trControl = trainControl(method= "cv"))
mars_fit
```
<div class="note">Selecting 4 terms with RMSE: 4.21; Rsquared: 0.69 -- about the same as the quadratic model.</div>

2. Show a summary of the model:
```{r}
summary(mars_fit)
```
3. Add the predicted values computed from the model to *cars2010_dt*:
```{r}
cars2010_dt[,mars_fit := stats::predict(mars_fit)]
```

4. Plot the MARS fit *mars_fit* line through the observed data:
```{r}
RplotterPkg::create_scatter_plot(
  df = cars2010_dt,
  aes_x = "EngDispl",
  aes_y = "FE",
  title = "Engine Displacement vs Fuel Efficiency (2010)",
  subtitle = "MARS fit: FE ~ EngDispl",
  x_title = "Engine Displacement",
  y_title = "Fuel Efficiency (MPG)",
  rot_y_tic_label = TRUE
) +
  geom_line(aes(y = mars_fit), color = "red", linetype = 2, size = 1.5)
```

 5. Plot the observed versus the fitted response values:
```{r, fig.width=10, fig.height=10}
df <- data.frame(
  Observed = cars2010_dt$FE,
  Fitted = mars_fit$finalModel$fitted.values[,1]
)
RplotterPkg::create_scatter_plot(
  df = df,
  aes_x = "Observed",
  aes_y = "Fitted",
  title = "Observed vs Fitted Response (2010)",
  subtitle = "MARS fit: (FE ~ EngDispl)",
  x_title = "Observed Fuel Efficiency",
  y_title = "Fitted Fuel Efficiency",
  rot_y_tic_label = TRUE,
  pts_line_alpha = 0.5,
  x_limits = c(10, 70),
  x_major_breaks = seq(10,70,10),
  y_limits = c(10, 70),
  y_major_breaks = seq(10,70,10)
)
```

<div class="task">Task: Apply the quadratic and MARS models to the 2011 test data. </div>

1. Compute the predictions for the quadratic lm2_fit model:
```{r}
cars2011_dt[, EngDispl2 := EngDispl^2] %>%
  .[, lm2_fit := stats::predict(lm2_fit, cars2011_dt)] %>%
  .[, mars_fit := stats::predict(mars_fit, cars2011_dt)]
```

2. Plot the predictions for the test set *cars2011_dt*:

```{r, fig.width=12, fig.height=10}
lm2_fit_plot <- RplotterPkg::create_scatter_plot(
  df = cars2011_dt,
  aes_x = "EngDispl",
  aes_y = "FE",
  x_title = "Engine Displacement (Quadratic)",
  y_title = "Fuel Efficiency (MPG)",
  rot_y_tic_label = TRUE
)+
  geom_line(aes(y = lm2_fit), color = "red", linetype = 2, size = 1.5)

mars_fit_plot <- RplotterPkg::create_scatter_plot(
  df = cars2011_dt,
  aes_x = "EngDispl",
  aes_y = "FE",
  x_title = "Engine Displacement (MARS)",
  do_y_title = FALSE,
  rot_y_tic_label = TRUE
) +
  geom_line(aes(y = mars_fit), color = "red", linetype = 2, size = 1.5)

layout <- list(
  plots = list(lm2_fit_plot, mars_fit_plot),
  rows = c(1,1),
  cols = c(1,2)
)

lm2_mars_plot <- RplotterPkg::multi_panel_grid(
  layout = layout,
  col_widths = c(6,6),
  row_heights = 7,
  title = "Predicting Fuel Efficiency from Engine Displacement",
  subtitle = "Quadratic and MARS fits on 2011 test data"
)
```
<div class="task">Task: Get the MARS test set performance values via caret's postResample function.</div>

```{r}
mars_performance <- caret::postResample(pred = cars2011_dt$mars_fit, obs = cars2011_dt$FE)
```
